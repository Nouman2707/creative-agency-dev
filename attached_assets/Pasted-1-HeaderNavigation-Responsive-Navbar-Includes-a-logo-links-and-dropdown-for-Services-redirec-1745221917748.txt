1. HeaderNavigation
Responsive Navbar: Includes a logo, links, and dropdown for "Services" (redirects to specific service pages).
Search: Icon to open search input; query redirects to the search page with results categorized by Team and Services.
Multilingual Support: Toggle for AR/EN language with RTL for Arabic.
2. HeroSection
Background: Use images/videos fetched from the CMS.
Slider: Auto-play for videos, smooth transitions for images.
Multilingual Support: Text in AR/EN with RTL for Arabic.
3. Our Team
Team Members: Display members with images, names, and roles.
Interactivity: Click on a member to view detailed bio, skills, contact info on a separate page.
Multilingual Support: Names, roles, and bios in AR/EN, with RTL support for Arabic.
4. Clients
Client Showcase: Display logos, testimonials, or case studies.
Multilingual Support: Text in AR/EN, RTL for Arabic.
5. Footer
Links & Subscription: Includes multiple links and a subscription form (email validation using Formik).
Email Validation: Prevent duplicate submissions and show appropriate success/error messages.
Multilingual Support: Labels and links in AR/EN, RTL support for Arabic.
6. Technical Requirements
Frontend:
Next.js for routing and pages (e.g., /services/[service-id]).
Tailwind CSS for styling, adhering to the dark theme (brown, white, black).
Redux Toolkit for state management (search query, language selection, form states).
Backend:
Strapi CMS to manage content like Pages, Services, Team Members, Blog, Clients, and Subscribers.
API for data fetching and form submissions.
Form Handling:
Formik for the subscription form with validation and error handling.
Multilingual Support: Use a library like next-intl or i18next for translations and RTL support for Arabic.
Performance: Optimize images, use SSG or SSR, and show loading states for API requests.
7. Design Guidelines
Follow the Figma design for layout, colors (dark brown, white, black), and typography.
Ensure responsiveness across desktop, tablet, and mobile devices.
Replace placeholder images with actual CMS content, maintaining the grayscale/dark filter style.
This approach covers all the major technical, functional, and design specifications for building the website.

Key Highlights:
Use Next.js, Tailwind CSS, Redux Toolkit, and Formik for the front-end implementation.
Set up Strapi to manage content (e.g., Services, Team, Blog, Subscribers) and handle API requests.
Implement multilingual support for Arabic (AR) and English (EN) with RTL styling for Arabic.
Ensure proper error handling for API requests and form submissions (e.g., prevent duplicate email subscriptions).
Follow the Figma design for styling, ensuring responsiveness and performance optimization.
Please review the instructions carefully and set up the necessary CMS collections and API endpoints. If you need additional assets (e.g., images, videos) or encounter any issues with the Figma file, feel free to reach out. Letâ€™s aim to complete this task by [insert deadline, if applicable], ensuring a seamless and user-friendly experience.